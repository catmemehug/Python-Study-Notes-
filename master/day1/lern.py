print("123")
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
""" #python代码不加分号，但是一定注意缩进
#在 Python 中，通常不需要在语句的结尾加上分号（;），因为 Python 中的语句通常是使用换行符来分隔的。但是，如果你在 Python 代码中加上分号，解释器通常也会将其视为有效的语句结束符号，并且不会影响代码的执行。

举个例子，下面是一段简单的 Python 代码，即使在每个语句的结尾都加上分号，它仍然会正常运行：

python
Copy code
print("Hello"); print("World");
这段代码会打印出两个独立的字符串，分别是 "Hello" 和 "World"。

总之，尽管在 Python 中加上分号并不是必须的，但如果你加上了分号，通常也不会对代码的执行产生任何影响。

 """
""" 代码块的定义：Python使用缩进来表示代码块的开始和结束。例如，if语句、for循环、while循环、函数定义等都以冒号（:）结尾，其后的缩进部分被视为代码块。缩进使得代码更易读，并且强制了一种一致的代码格式。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if condition:
    # 这是if语句的代码块
    do_something()
else:
    # 这是else语句的代码块
    do_something_else()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
语法结构：缩进是 Python 中的语法结构的一部分，不正确的缩进会导致语法错误。如果缩进不正确，Python 解释器会引发 IndentationError。

可读性：合理的缩进可以使代码更易读。约定俗成的 Python 编码风格通常是使用四个空格来缩进。

代码嵌套：可以在代码块中嵌套其他代码块，只需增加相应的缩进级别即可。例如，在一个循环中嵌套另一个循环，或在一个函数中嵌套另一个函数。

匿名函数和列表推导式：在定义匿名函数和列表推导式时，缩进同样非常重要。它们也使用缩进来表示代码块。

总的来说，Python 中的缩进不仅仅是一种格式化规范，而是语言的一部分，它对于代码的结构和执行都具有重要影响。

--------------------------------------------------------------------------------------------------------------------------------------------------------------
 """
 
#定义标识符规则：
"""
1、不以数字开头
2、只能使用字母、数字、下划线
3、python严格区分大小写 """
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#变量
num = 1 
#python语言中定义变量不需要在前面声明变量类型
#python语言中同一变量名重复赋值，不会影响程序运行，最后赋值的数据会覆盖之前的数据
""" 
直接用： 变量名 = 数值 即可 
不用像C语言一样 C语言：变量类型 变量名 = 数值；                                
"""
print(f'num = {num}')
#蓝色f是格式化符号，用于输出变量，格式为 f'{变量}'

#查看变量类型：
""" type(变量名)
 """
print("----------------------")
print(f"{num}",type(num))

#变量类型
"""
 int 整形
float 浮点型
bool 布尔型 /*布尔型结果只为 true/false（真/假）
str 字符串(string)
 """
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------
#高级数据类型
""" list 列表变量(一维数组) """
# 变量名 = ["数据","数据","数据"]
""" 特点：有序 可重复 可拓展 """

""" tuple 元组变量（一维数组） """
# 变量名 = （"数据","数据","数据","数据"）
""" 特点：有序 可重复 不可拓展 """

""" set 集合变量 """
# 变量名 = {"数据","数据","数据"}
""" 特点： 无序 不可重复 可拓展 """
num2 = 1
print("%.2f" % num2)
#python格式化字符串
""" 
%d，%f作用跟C语言一样
print("%d" % 数据) 
"""
#---------------------------------------------------------------------------------------------------------------------------------------------------
#转义符
""" \n 换行
\r 回车
\t 水平制表 空四个格
\b 回车 退一格
\0 空格    
 """
#print 输出后自动换行
#print("1234", end = " ") end = " "这个东西可以实现不换行
print("hello", end= " ")
print("worde")
